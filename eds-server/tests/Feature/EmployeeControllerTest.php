<?php

namespace Tests\Feature;

use App\Enums\HttpResponseStatus;
use App\Enums\UserTypeValues;
use App\User;
use Saurovh\EdsPhpSdk\Api;
use GuzzleHttp\Client;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Exception\RequestException;

class EmployeeControllerTest extends TestCase
{
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * A basic feature test example.
     * @return void
     */
    public function testUnauthorizedGet()
    {
        $user = factory(User::class)->create([
            'type' => UserTypeValues::SUPERVISOR
        ]);
        $this->actingAs($user);
        $response = $this->json('GET', '/api/v1/employees');
        $response->assertStatus(HttpResponseStatus::HTTP_UNAUTHORIZED);
    }

    public function testGet()
    {
        $user = factory(User::class)->create([
            'type' => UserTypeValues::ADMIN
        ]);
        $this->actingAs($user);

        $edsUserData = [
            [
                "id"          => 1,
                "name"        => "Clare Runolfsson",
                "phone"       => "1-331-326-0300 x008",
                "email"       => "cleo24@example.com",
                "joiningDate" => "2021-11-04T20:00:23.996Z",
            ],
            [
                "id"          => 2,
                "name"        => "Christopher Crist",
                "phone"       => "+16737466532",
                "email"       => "emilia.schaefer@example.net",
                "joiningDate" => "2021-11-04T20:00:23.996Z",
            ]
        ];
        foreach ($edsUserData as $user) {
           User::create([
                'name'        => $user['name'],
                'email'       => $user['email'],
                'type'        => UserTypeValues::SUPERVISOR,
                'employee_id' => $user['id'],
                'password'    => $this->app->get('hash')->make('test123')
            ]);
        }
        /**
         * @var Api $edsApi
         */
        $edsApi = $this->app->get(Api::class);
        $mock   = new MockHandler([
            new Response(200, [], json_encode($edsUserData)),
            new RequestException('Error Communicating with Server', new Request('GET', '/employees')),
            new RequestException('UnAuthorized', new Request('GET', '/employees'),
                new Response(401))
        ]);

        $handlerStack = HandlerStack::create($mock);
        $client       = new Client(['handler' => $handlerStack]);
        $edsApi->setHttpClient($client);
        $response = $this->json('GET', '/api/v1/employees');
        $response->assertOk();
        $response->assertJsonStructure(["*" => ["id", "name", "phone", "email", "joiningDate", "userId", "type"]]);
        $response->assertJsonCount(2);

        $response = $this->json('GET', '/api/v1/employees');
        $response->assertOk();
        $response->assertJsonCount(0);

        $response = $this->json('GET', '/api/v1/employees');
        $response->assertOk();
        $response->assertJsonCount(0);
    }
}
